// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/smurfs.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	Info(ctx context.Context, opts ...grpc.CallOption) (LogService_InfoClient, error)
	Warn(ctx context.Context, opts ...grpc.CallOption) (LogService_WarnClient, error)
	Error(ctx context.Context, opts ...grpc.CallOption) (LogService_ErrorClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Info(ctx context.Context, opts ...grpc.CallOption) (LogService_InfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/LogService/Info", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceInfoClient{stream}
	return x, nil
}

type LogService_InfoClient interface {
	Send(*LogRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type logServiceInfoClient struct {
	grpc.ClientStream
}

func (x *logServiceInfoClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceInfoClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Warn(ctx context.Context, opts ...grpc.CallOption) (LogService_WarnClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[1], "/LogService/Warn", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceWarnClient{stream}
	return x, nil
}

type LogService_WarnClient interface {
	Send(*LogRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type logServiceWarnClient struct {
	grpc.ClientStream
}

func (x *logServiceWarnClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceWarnClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Error(ctx context.Context, opts ...grpc.CallOption) (LogService_ErrorClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[2], "/LogService/Error", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceErrorClient{stream}
	return x, nil
}

type LogService_ErrorClient interface {
	Send(*LogRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type logServiceErrorClient struct {
	grpc.ClientStream
}

func (x *logServiceErrorClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceErrorClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	Info(LogService_InfoServer) error
	Warn(LogService_WarnServer) error
	Error(LogService_ErrorServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) Info(LogService_InfoServer) error {
	return status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedLogServiceServer) Warn(LogService_WarnServer) error {
	return status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (UnimplementedLogServiceServer) Error(LogService_ErrorServer) error {
	return status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_Info_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Info(&logServiceInfoServer{stream})
}

type LogService_InfoServer interface {
	SendAndClose(*Empty) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type logServiceInfoServer struct {
	grpc.ServerStream
}

func (x *logServiceInfoServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceInfoServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_Warn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Warn(&logServiceWarnServer{stream})
}

type LogService_WarnServer interface {
	SendAndClose(*Empty) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type logServiceWarnServer struct {
	grpc.ServerStream
}

func (x *logServiceWarnServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceWarnServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_Error_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Error(&logServiceErrorServer{stream})
}

type LogService_ErrorServer interface {
	SendAndClose(*Empty) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type logServiceErrorServer struct {
	grpc.ServerStream
}

func (x *logServiceErrorServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceErrorServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Info",
			Handler:       _LogService_Info_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Warn",
			Handler:       _LogService_Warn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Error",
			Handler:       _LogService_Error_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/smurfs.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TokenResponse, error)
	GetUserInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/AuthService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/AuthService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	GetToken(context.Context, *Empty) (*TokenResponse, error)
	GetUserInfo(context.Context, *Empty) (*UserInfo, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetToken(context.Context, *Empty) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthServiceServer) GetUserInfo(context.Context, *Empty) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthService_GetToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AuthService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/smurfs.proto",
}

// MetadataStorageServiceClient is the client API for MetadataStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataStorageServiceClient interface {
	Get(ctx context.Context, in *GetMetadataStorageRequest, opts ...grpc.CallOption) (*MetadataStorageResponse, error)
	Set(ctx context.Context, in *SetMetadataStorageRequest, opts ...grpc.CallOption) (*Empty, error)
}

type metadataStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataStorageServiceClient(cc grpc.ClientConnInterface) MetadataStorageServiceClient {
	return &metadataStorageServiceClient{cc}
}

func (c *metadataStorageServiceClient) Get(ctx context.Context, in *GetMetadataStorageRequest, opts ...grpc.CallOption) (*MetadataStorageResponse, error) {
	out := new(MetadataStorageResponse)
	err := c.cc.Invoke(ctx, "/MetadataStorageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataStorageServiceClient) Set(ctx context.Context, in *SetMetadataStorageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MetadataStorageService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataStorageServiceServer is the server API for MetadataStorageService service.
// All implementations must embed UnimplementedMetadataStorageServiceServer
// for forward compatibility
type MetadataStorageServiceServer interface {
	Get(context.Context, *GetMetadataStorageRequest) (*MetadataStorageResponse, error)
	Set(context.Context, *SetMetadataStorageRequest) (*Empty, error)
	mustEmbedUnimplementedMetadataStorageServiceServer()
}

// UnimplementedMetadataStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataStorageServiceServer struct {
}

func (UnimplementedMetadataStorageServiceServer) Get(context.Context, *GetMetadataStorageRequest) (*MetadataStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetadataStorageServiceServer) Set(context.Context, *SetMetadataStorageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMetadataStorageServiceServer) mustEmbedUnimplementedMetadataStorageServiceServer() {
}

// UnsafeMetadataStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataStorageServiceServer will
// result in compilation errors.
type UnsafeMetadataStorageServiceServer interface {
	mustEmbedUnimplementedMetadataStorageServiceServer()
}

func RegisterMetadataStorageServiceServer(s grpc.ServiceRegistrar, srv MetadataStorageServiceServer) {
	s.RegisterService(&MetadataStorageService_ServiceDesc, srv)
}

func _MetadataStorageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataStorageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataStorageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataStorageServiceServer).Get(ctx, req.(*GetMetadataStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataStorageService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetadataStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataStorageServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetadataStorageService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataStorageServiceServer).Set(ctx, req.(*SetMetadataStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataStorageService_ServiceDesc is the grpc.ServiceDesc for MetadataStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MetadataStorageService",
	HandlerType: (*MetadataStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MetadataStorageService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _MetadataStorageService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/smurfs.proto",
}
